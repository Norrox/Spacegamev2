[gd_scene load_steps=9 format=2]

[ext_resource path="res://scripts/landing.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D

var storedlandedscene
var common = 0
var metal = 0
var uncommon = 0 
var precious = 0
var radioactive = 0
var exotic = 0
var resourcesizelist = []
var resourcelocationlist = []
var resourcetypelist = []
var totalminerals = 0
var objecttype = \"planet\"
var planettemperature = 0
var planethabitable = false
var rockyorgassy = \"rocky\"
var gravity
var planetradius = 0
var planetname = \"\"
var orbitradius = 0
var currentangle = 0
var landingvariability = 5
var resourcesscanned = false
var ignoreflag = 0
var seed1 = 0
var period = 0
var lacunarity = 0
var persistence = 0
var colorchoice = Color(1.0, 1.0, 1.0)
var innerR
var innerG
var innerB
var outerR
var outerG
var outerB
var centrevec
var shaderalpha
var newmat
var sealevel

func _ready():
	pass

"

[sub_resource type="CircleShape2D" id=2]

radius = 1632.83

[sub_resource type="Shader" id=3]

code = "shader_type canvas_item;
render_mode blend_premul_alpha;
uniform float PI = 3.141592653589793238462643383;
uniform vec3 lightDir = vec3(-0.8, -0.8, 0.5);
uniform float circlesizepercent = 50.0;
uniform float border = 0.05;

void fragment() {
	float theta = UV.y * 3.14159;
	float phi = UV.x * 3.14159 * 0.5;
	vec3 unit = vec3(0.0, 0.0, 0.0);
	unit.x = sin(phi) * sin(theta);
	unit.y = cos(theta) * -1.0;
	unit.z = cos(phi) * sin(theta);
	unit = normalize(unit);
	vec2 circle = (UV - 0.5) * 2.0;
	float rot = TIME / 30.0;
	float radius = length(circle);
	vec3 normal = vec3(circle.x, circle.y, sqrt(1.0 - circle.x*circle.x - circle.y*circle.y));
	vec3 l = normalize(lightDir);
	float ndotl = max(0.0, dot(normal, l));
	vec2 texCoords = vec2(0.5 + atan(normal.x, normal.z) / (2.0*PI) + rot, asin(normal.y) / PI - 0.5);
	vec3 texColor = texture(TEXTURE, texCoords).xyz;
	vec3 lightColor = vec3(ndotl) * texColor * 1.5;
	vec4 outside = vec4(0.0, 0.0, 0.0, 0.0);
	vec4 inside = vec4(lightColor, 1.0);
	if (radius >= 1.0)
		COLOR.rgba = outside;
 	else
		COLOR.rgba = inside;
}

"

[sub_resource type="ShaderMaterial" id=4]

resource_local_to_scene = true
shader = SubResource( 3 )
shader_param/PI = 3.14159
shader_param/lightDir = Vector3( 0.1, 0, 0.1 )
shader_param/circlesizepercent = 50.0
shader_param/border = 0.05

[sub_resource type="OpenSimplexNoise" id=5]

seed = 224
octaves = 6
period = 191.6
persistence = 0.783
lacunarity = 4.0

[sub_resource type="NoiseTexture" id=6]

seamless = true
noise = SubResource( 5 )

[sub_resource type="CircleShape2D" id=7]

radius = 113.707

[node name="planet" type="Node2D"]
script = SubResource( 1 )
__meta__ = {
"_edit_group_": true
}

[node name="gravity" type="Area2D" parent="."]
space_override = 1
gravity_point = true
gravity_distance_scale = 0.007
gravity_vec = Vector2( 0, 0 )
gravity = 100.0
linear_damp = 0.0
angular_damp = 0.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="gravity"]
shape = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
modulate = Color( 0.960784, 0.972549, 0.976471, 1 )
material = SubResource( 4 )
scale = Vector2( 0.5, 0.5 )
texture = SubResource( 6 )

[node name="landing" type="Area2D" parent="Sprite"]
visible = false
gravity = 0.0
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Sprite/landing"]
visible = false
shape = SubResource( 7 )

[node name="collisiontimer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true

[connection signal="timeout" from="collisiontimer" to="Sprite/landing" method="_on_collisiontimer_timeout"]
